# -*- coding: utf-8 -*-
"""MIlhamFachlevi_Dicoding_ImageClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QsUQF4cs8bc_xPghYZ51-P57CjBkLawh

# Kaggle Installation
"""

# install kaggle
!pip install -q kaggle

from google.colab import files
files.upload()

# create a kaggle folder
!mkdir ~/.kaggle

# copy the kaggle.json to folder created  
!cp kaggle.json ~/.kaggle/

# permisson for the json to act
!chmod 600 ~/.kaggle/kaggle.json

# to list all avalaible datasets in kaggle
!kaggle datasets list

!kaggle datasets download -d madisona/translated-animals10

# unzip
!mkdir animal
!unzip -qq translated-animals10.zip -d animal
!ls animal

"""# Import Library"""

import os
import pandas as pd
import shutil
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf

animal = os.path.join('/content/animal/animals10/raw-img')
print(os.listdir(animal))

unused_animal = ['spider', 'elephant', 'squirrel', 'cow', 'dog', 'sheep' ]

for x in unused_animal:
  path = os.path.join(animal, x)
  shutil.rmtree(path)

list_animal = os.listdir(animal)
print(list_animal)

from PIL import Image
total = 0

for x in list_animal:
  dir = os.path.join(animal, x)
  y = len(os.listdir(dir))
  print(x+':', y)
  total = total + y
  
  img_name = os.listdir(dir)
  for z in range(4):
    img_path = os.path.join(dir, img_name[z])
    img = Image.open(img_path)
    print('-',img.size)
  print('---------------')

print('\nTotal :', total)

fig, ax = plt.subplots(2, 2, figsize=(35,25))
fig.suptitle("Animals", fontsize=24)
sorted_animal = sorted(list_animal)
animals_id = 0
for i in range(2):
  for j in range(2):
    try:
      selected_animal = sorted_animal[animals_id] 
      animals_id += 1
    except:
      break
    if selected_animal == '.TEMP':
        continue
    selected_animal_images = os.listdir(os.path.join(animal, selected_animal))
    selected_animal_random = np.random.choice(selected_animal_images)
    img = plt.imread(os.path.join(animal, selected_animal, selected_animal_random))
    ax[i][j].imshow(img)
    ax[i][j].set_title(selected_animal, pad=10, fontsize=22)
    
plt.setp(ax, xticks=[],yticks=[])
plt.show

dataset_train = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    rescale=1/255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2   
)

batch_size = 256

training_data = dataset_train.flow_from_directory(
    animal,
    target_size=(150, 150),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training')

val_data = dataset_train.flow_from_directory(
    animal, 
    target_size=(150, 150),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5), 
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(4, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics = ['accuracy'])

model.summary()

tf.test.gpu_device_name()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>=0.92 and logs.get('val_accuracy')>=0.92):
      print("\nAccuracy is above 92%!")
      self.model.stop_training = True

callbacks = myCallback()

device_name = tf.test.gpu_device_name()
if len(device_name) > 0:
    print("Found GPU at: {}".format(device_name))
else:
    device_name = "/device:CPU:0"
    print("No GPU, using {}.".format(device_name))

tf.device('/device:GPU:0')

history = model.fit(training_data, 
                    epochs = 100, 
                    steps_per_epoch = training_data.samples // batch_size,
                    validation_data = val_data, 
                    validation_steps = val_data.samples // batch_size,
                    verbose = 1,
                    callbacks = [callbacks])

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

!ls -la | grep 'model'